#!/bin/bash
#

# This script on Linux builds simulide and its plugins for Windows.
# Relies on the MXE cross-platform build environment, see http://mxe.cc
# Pleae add mxe/bin folder to your path.

source ../version

if [ $_BITS -eq 64 ]; then
  TRGT_PROC=x86_64
elif [ $_BITS -eq 32 ]; then
  TRGT_PROC=i686
fi

BUILD_DIR=`pwd`
INSTALL_DIR=$BUILD_DIR"/build-"$_ARCH$_BITS

echo ${VERSION}
echo ${INSTALL_DIR}

TRGT_KEY=${TRGT_PROC}-w64-mingw32.shared
TOOLCHAIN_DIR=$(dirname "`which ${TRGT_KEY}-gcc`")
TOOLCHAIN_DIR=$(dirname "$TOOLCHAIN_DIR")

echo "MXEDIR=$TOOLCHAIN_DIR"

export CC="$TRGT_KEY-gcc"
export CXX="$TRGT_KEY-g++"
export AR="$TRGT_KEY-gcc-ar"
export RANLIB="$TRGT_KEY-gcc-ranlib"
export NM="$TRGT_KEY-gcc-nm"
export GCOV="$TRGT_KEY-gcov"
export CMAKE="$TRGT_KEY-cmake"

which ${CMAKE} 2>&1 >> /dev/null
mxe_cmake_avlbl=$?
if [ $mxe_cmake_avlbl -ne 0 ]; then
  export CMAKE=
fi

export "PKG_CONFIG_PATH_"$TRGT_PROC"_w64_mingw32_"$LINKAGE="$INSTALL_DIR"/lib/pkgconfig

export AVR32_HOME=`which avr-gcc |sed 's/^\(.*\)\/bin\/avr-gcc$/\1/'`
if [ -d $AVR32_HOME/avr ]; then
  echo "avr-gcc toolchain found"
  AVR_INC=$AVR32_HOME/avr
else
  #Strange. My be ccache installed?
  #Fall back to default system location
  AVR32_HOME=/usr
  if [ -d $AVR32_HOME/lib/avr ]; then
    AVR_INC=$AVR32_HOME/lib/avr
  elif [ -d $AVR32_HOME/avr ]; then
    AVR_INC=$AVR32_HOME/avr
  fi
fi
echo "$AVR32_HOME will be used as avr-gcc home"
echo " "
echo " "
echo " "
echo "*******************************************************"
echo "Building libglibc_win (provides strsep function for simavr)"
echo "*******************************************************"
cd $BUILD_DIR/libglibc_win
rm -r build_${TRGT_KEY}
mkdir build_${TRGT_KEY}
rm -f config.status
rm -f aclocal.m4
rm -r autom4te.cache
rm -r .deps
aclocal
autoconf
automake --add-missing
chmod u+rx ./configure
cd build_${TRGT_KEY}
../configure --host=${TRGT_KEY} --prefix="$INSTALL_DIR"

#make clean
make install
ret=$?
if [ $ret -ne 0 ]; then
  cd $BUILD_DIR
  echo libglibc_win build failed
  exit 1
fi

echo " "
echo " "
echo "*******************************************************"
echo Building dlfcn-win32
echo "*******************************************************"
cd $BUILD_DIR/dlfcn-win32
rm -r build_${TRGT_KEY}
mkdir build_${TRGT_KEY}
cd build_${TRGT_KEY}
if [[ "x${CMAKE}" == "x" ]]; then
cat >mingw_cross_toolchain.cmake <<'EOL'
SET(CMAKE_SYSTEM_NAME Windows)
include(CMakeForceCompiler)
# Prefix detection only works with compiler id "GNU"
CMAKE_FORCE_C_COMPILER(${GNU_HOST}-gcc GNU)
# CMake doesn't automatically look for prefixed 'windres', do it manually:
SET(CMAKE_RC_COMPILER ${GNU_HOST}-windres)
EOL
cmake \
-D CMAKE_BUILD_TYPE=Release \
-D GNU_HOST=$TRGT_KEY \
-D CMAKE_TOOLCHAIN_FILE=mingw_cross_toolchain.cmake \
-D CMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
..
ret=$?
else
${CMAKE} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" ..
ret=$?
fi
if [ $ret -ne 0 ]; then
  cd $BUILD_DIR
  echo dlfcn-win32 build failed
  exit 1
fi
#make clean
make DESTDIR="" install

#cd $BUILD_DIR
#exit 0

echo ""
echo ""
echo "*******************************************************"
echo Building libelf-0.8.13
echo "*******************************************************"
cd $BUILD_DIR/libelf-0.8.13
rm -f config.cache
rm -f confdefs.h
rm -f config.h
rm -f lib/sys_elf.h
chmod u+rx ./configure
chmod u+rx ./config.guess
chmod u+rx ./config.sub
rm -r build_${TRGT_KEY}
mkdir build_${TRGT_KEY}
cd build_${TRGT_KEY}
libelf_cv_int64='long long' libelf_cv_int32=int libelf_cv_int16=short ../configure \
    --host=$TRGT_KEY --enable-elf64 --enable-compat --prefix="$INSTALL_DIR"

#make clean
make install
ret=$?
if [ $ret -ne 0 ]; then
  cd $BUILD_DIR
  echo libelf-0.8.13 build failed
  exit 1
fi

echo ""
echo ""
echo "******************************************************"
echo Building libsimavr
echo "******************************************************"
cd "$INSTALL_DIR"
mkdir include
cd "$INSTALL_DIR"/include
cat >string.h <<'EOL'
#ifndef GNUSTRING_WIN_H
#define GNUSTRING_WIN_H
#if defined __MINGW32__
extern char *strsep (char **__restrict __stringp,
			 const char *__restrict __delim)
	// __THROW __nonnull ((1, 2))
	;
#endif //__MINGW32__
#include_next <string.h>
#endif //GNUSTRING_WIN_H
EOL

  cd $BUILD_DIR/simavr/simavr
  
  export LDFLAGS=
  export LFLAGS=
  LFLAGS_SIMAVR="-L${INSTALL_DIR}/lib -L${BUILD_DIR}/simavr/simavr/obj-${TRGT_KEY} -lsimavr -lm -lelf -lws2_32 -lglibc_win"
  cat >uname <<EOF
#!/bin/bash
echo Msys
EOF
  chmod ugo+rx ./uname
  #env PATH=$BUILD_DIR/simavr:$PATH make clean RELEASE=1
  env PATH=$BUILD_DIR/simavr:$PATH make libsimavr WIN=Msys AVR_INC=$AVR_INC CFLAGS="-I${INSTALL_DIR}/include -I${TOOLCHAIN_DIR}/${TRGT_KEY}/include -O3 -Wall" \
	RELEASE=1 LFLAGS="" LDFLAGS="$LFLAGS_SIMAVR" EXTRA_LDFLAGS="$LFLAGS_SIMAVR"
  env PATH=$BUILD_DIR/simavr:$PATH make install WIN=Msys CFLAGS="-I${INSTALL_DIR}/include -I${TOOLCHAIN_DIR}/${TRGT_KEY}/include -O3 -Wall" \
	DESTDIR="${INSTALL_DIR}" RELEASE=1 LFLAGS="" LDFLAGS="$LFLAGS_SIMAVR" EXTRA_LDFLAGS="$LFLAGS_SIMAVR"
    
  #mv -f ${INSTALL_DIR}/bin/simavr ${INSTALL_DIR}/bin/simavr.exe

echo " "
echo " "
echo "*******************************************************"
echo Build done
echo "*******************************************************"
