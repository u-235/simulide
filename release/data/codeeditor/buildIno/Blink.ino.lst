
/home/user/Escritorio/simulide_0.1.4/release/SimulIDE_0.1.4-Lin64-NO_PIC/data/codeeditor/buildIno/Blink.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <port_to_mode_PGM>:
  86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
  a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  b4:	04 08 10 20                                         ... 

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ad 30       	cpi	r26, 0x0D	; 13
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  d8:	0c 94 47 03 	jmp	0x68e	; 0x68e <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	e8 59       	subi	r30, 0x98	; 152
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	34 91       	lpm	r19, Z
	uint8_t bit = digitalPinToBitMask(pin);
  ea:	fc 01       	movw	r30, r24
  ec:	ec 55       	subi	r30, 0x5C	; 92
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
  f2:	fc 01       	movw	r30, r24
  f4:	e0 57       	subi	r30, 0x70	; 112
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
  fa:	ee 23       	and	r30, r30
  fc:	09 f4       	brne	.+2      	; 0x100 <digitalWrite+0x20>
  fe:	3b c0       	rjmp	.+118    	; 0x176 <digitalWrite+0x96>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 100:	33 23       	and	r19, r19
 102:	39 f1       	breq	.+78     	; 0x152 <digitalWrite+0x72>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 104:	33 30       	cpi	r19, 0x03	; 3
 106:	91 f0       	breq	.+36     	; 0x12c <digitalWrite+0x4c>
 108:	38 f4       	brcc	.+14     	; 0x118 <digitalWrite+0x38>
 10a:	31 30       	cpi	r19, 0x01	; 1
 10c:	a9 f0       	breq	.+42     	; 0x138 <digitalWrite+0x58>
 10e:	32 30       	cpi	r19, 0x02	; 2
 110:	01 f5       	brne	.+64     	; 0x152 <digitalWrite+0x72>
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 112:	84 b5       	in	r24, 0x24	; 36
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	12 c0       	rjmp	.+36     	; 0x13c <digitalWrite+0x5c>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 118:	37 30       	cpi	r19, 0x07	; 7
 11a:	91 f0       	breq	.+36     	; 0x140 <digitalWrite+0x60>
 11c:	38 30       	cpi	r19, 0x08	; 8
 11e:	a1 f0       	breq	.+40     	; 0x148 <digitalWrite+0x68>
 120:	34 30       	cpi	r19, 0x04	; 4
 122:	b9 f4       	brne	.+46     	; 0x152 <digitalWrite+0x72>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 124:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7ff781>
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	03 c0       	rjmp	.+6      	; 0x132 <digitalWrite+0x52>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 12c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7ff781>
 130:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 132:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7ff781>
 136:	0d c0       	rjmp	.+26     	; 0x152 <digitalWrite+0x72>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 138:	84 b5       	in	r24, 0x24	; 36
 13a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 13c:	84 bd       	out	0x24, r24	; 36
 13e:	09 c0       	rjmp	.+18     	; 0x152 <digitalWrite+0x72>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 140:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7ff7b1>
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	03 c0       	rjmp	.+6      	; 0x14e <digitalWrite+0x6e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 148:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7ff7b1>
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__stack+0x7ff7b1>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e4 58       	subi	r30, 0x84	; 132
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	a5 91       	lpm	r26, Z+
 15e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 160:	8f b7       	in	r24, 0x3f	; 63
	cli();
 162:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 164:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 166:	61 11       	cpse	r22, r1
 168:	03 c0       	rjmp	.+6      	; 0x170 <digitalWrite+0x90>
		*out &= ~bit;
 16a:	20 95       	com	r18
 16c:	2e 23       	and	r18, r30
 16e:	01 c0       	rjmp	.+2      	; 0x172 <digitalWrite+0x92>
	} else {
		*out |= bit;
 170:	2e 2b       	or	r18, r30
 172:	2c 93       	st	X, r18
	}

	SREG = oldSREG;
 174:	8f bf       	out	0x3f, r24	; 63
 176:	08 95       	ret

00000178 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 178:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 17a:	f8 94       	cli
	m = timer0_overflow_count;
 17c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 180:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 184:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 188:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 18c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 18e:	a8 9b       	sbis	0x15, 0	; 21
 190:	05 c0       	rjmp	.+10     	; 0x19c <micros+0x24>
 192:	2f 3f       	cpi	r18, 0xFF	; 255
 194:	19 f0       	breq	.+6      	; 0x19c <micros+0x24>
		m++;
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	a1 1d       	adc	r26, r1
 19a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 19c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 19e:	ba 2f       	mov	r27, r26
 1a0:	a9 2f       	mov	r26, r25
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	82 0f       	add	r24, r18
 1a8:	91 1d       	adc	r25, r1
 1aa:	a1 1d       	adc	r26, r1
 1ac:	b1 1d       	adc	r27, r1
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	4a 95       	dec	r20
 1be:	d1 f7       	brne	.-12     	; 0x1b4 <micros+0x3c>
}
 1c0:	08 95       	ret

000001c2 <delay>:

void delay(unsigned long ms)
{
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 1d6:	0e 94 bc 00 	call	0x178	; 0x178 <micros>
 1da:	4b 01       	movw	r8, r22
 1dc:	5c 01       	movw	r10, r24

	while (ms > 0) {
 1de:	c1 14       	cp	r12, r1
 1e0:	d1 04       	cpc	r13, r1
 1e2:	e1 04       	cpc	r14, r1
 1e4:	f1 04       	cpc	r15, r1
 1e6:	f1 f0       	breq	.+60     	; 0x224 <delay+0x62>
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 1e8:	0e 94 bc 00 	call	0x178	; 0x178 <micros>
 1ec:	dc 01       	movw	r26, r24
 1ee:	cb 01       	movw	r24, r22
 1f0:	88 19       	sub	r24, r8
 1f2:	99 09       	sbc	r25, r9
 1f4:	aa 09       	sbc	r26, r10
 1f6:	bb 09       	sbc	r27, r11
 1f8:	88 3e       	cpi	r24, 0xE8	; 232
 1fa:	93 40       	sbci	r25, 0x03	; 3
 1fc:	a1 05       	cpc	r26, r1
 1fe:	b1 05       	cpc	r27, r1
 200:	70 f3       	brcs	.-36     	; 0x1de <delay+0x1c>
			ms--;
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	c2 1a       	sub	r12, r18
 206:	d1 08       	sbc	r13, r1
 208:	e1 08       	sbc	r14, r1
 20a:	f1 08       	sbc	r15, r1
			start += 1000;
 20c:	88 ee       	ldi	r24, 0xE8	; 232
 20e:	88 0e       	add	r8, r24
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	98 1e       	adc	r9, r24
 214:	a1 1c       	adc	r10, r1
 216:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 218:	c1 14       	cp	r12, r1
 21a:	d1 04       	cpc	r13, r1
 21c:	e1 04       	cpc	r14, r1
 21e:	f1 04       	cpc	r15, r1
 220:	19 f7       	brne	.-58     	; 0x1e8 <delay+0x26>
 222:	dd cf       	rjmp	.-70     	; 0x1de <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	9f 90       	pop	r9
 232:	8f 90       	pop	r8
 234:	08 95       	ret

00000236 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 24c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 250:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 254:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 258:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 25c:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>

	m += MILLIS_INC;
	f += FRACT_INC;
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 264:	2d 37       	cpi	r18, 0x7D	; 125
 266:	20 f4       	brcc	.+8      	; 0x270 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	a1 1d       	adc	r26, r1
 26c:	b1 1d       	adc	r27, r1
 26e:	05 c0       	rjmp	.+10     	; 0x27a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 270:	26 e8       	ldi	r18, 0x86	; 134
 272:	23 0f       	add	r18, r19
		m += 1;
 274:	02 96       	adiw	r24, 0x02	; 2
 276:	a1 1d       	adc	r26, r1
 278:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 27a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	timer0_millis = m;
 27e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 282:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 286:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 28a:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
	timer0_overflow_count++;
 28e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 292:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 296:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 29a:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	a1 1d       	adc	r26, r1
 2a2:	b1 1d       	adc	r27, r1
 2a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 2a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 2ac:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 2b0:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
}
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2ca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2cc:	84 b5       	in	r24, 0x24	; 36
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2d8:	85 b5       	in	r24, 0x25	; 37
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 2de:	85 b5       	in	r24, 0x25	; 37
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 2e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__stack+0x7ff76f>
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__stack+0x7ff76f>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 2ee:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__stack+0x7ff782>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 2f2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__stack+0x7ff782>
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__stack+0x7ff782>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 2fc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__stack+0x7ff782>
 300:	81 60       	ori	r24, 0x01	; 1
 302:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__stack+0x7ff782>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 306:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__stack+0x7ff781>
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__stack+0x7ff781>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 310:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__stack+0x7ff7b2>
 314:	84 60       	ori	r24, 0x04	; 4
 316:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__stack+0x7ff7b2>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 31a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__stack+0x7ff7b1>
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__stack+0x7ff7b1>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__stack+0x7ff77b>
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__stack+0x7ff77b>
		sbi(ADCSRA, ADPS1);
 32e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__stack+0x7ff77b>
 332:	82 60       	ori	r24, 0x02	; 2
 334:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__stack+0x7ff77b>
		sbi(ADCSRA, ADPS0);
 338:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__stack+0x7ff77b>
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__stack+0x7ff77b>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 342:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__stack+0x7ff77b>
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__stack+0x7ff77b>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 34c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__stack+0x7ff7c2>
 // INOLINE 8
// fin led=13< // INOLINE 9
 // INOLINE 10
// the setup routine runs once when you press reset: // INOLINE 11
void setup() {         // INOLINE 12
  myvar = 0.33; // INOLINE 13
 350:	83 ec       	ldi	r24, 0xC3	; 195
 352:	95 ef       	ldi	r25, 0xF5	; 245
 354:	a8 ea       	ldi	r26, 0xA8	; 168
 356:	be e3       	ldi	r27, 0x3E	; 62
 358:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <myvar>
 35c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <myvar+0x1>
 360:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <myvar+0x2>
 364:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <myvar+0x3>
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 368:	e1 eb       	ldi	r30, 0xB1	; 177
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 36e:	ed e9       	ldi	r30, 0x9D	; 157
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 374:	88 23       	and	r24, r24
 376:	99 f0       	breq	.+38     	; 0x39e <main+0xd4>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	fc 01       	movw	r30, r24
 380:	ea 57       	subi	r30, 0x7A	; 122
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	a5 91       	lpm	r26, Z+
 386:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 388:	fc 01       	movw	r30, r24
 38a:	e4 58       	subi	r30, 0x84	; 132
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	85 91       	lpm	r24, Z+
 390:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 392:	8f b7       	in	r24, 0x3f	; 63
                cli();
 394:	f8 94       	cli
		*reg |= bit;
 396:	ec 91       	ld	r30, X
 398:	e2 2b       	or	r30, r18
 39a:	ec 93       	st	X, r30
		SREG = oldSREG;
 39c:	8f bf       	out	0x3f, r24	; 63
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 39e:	c0 e0       	ldi	r28, 0x00	; 0
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
} // INOLINE 17
 // INOLINE 18
// the loop routine runs over and over again forever: // INOLINE 19
void loop()  // INOLINE 20
{ // INOLINE 21
    float kk = myvar; // INOLINE 22
 3a2:	c0 90 09 01 	lds	r12, 0x0109	; 0x800109 <myvar>
 3a6:	d0 90 0a 01 	lds	r13, 0x010A	; 0x80010a <myvar+0x1>
 3aa:	e0 90 0b 01 	lds	r14, 0x010B	; 0x80010b <myvar+0x2>
 3ae:	f0 90 0c 01 	lds	r15, 0x010C	; 0x80010c <myvar+0x3>
 // INOLINE 23
    myvar += 0.1; // INOLINE 24
 3b2:	2d ec       	ldi	r18, 0xCD	; 205
 3b4:	3c ec       	ldi	r19, 0xCC	; 204
 3b6:	4c ec       	ldi	r20, 0xCC	; 204
 3b8:	5d e3       	ldi	r21, 0x3D	; 61
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	0e 94 32 02 	call	0x464	; 0x464 <__addsf3>
 3c2:	4b 01       	movw	r8, r22
 3c4:	5c 01       	movw	r10, r24
 3c6:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <myvar>
 3ca:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <myvar+0x1>
 3ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <myvar+0x2>
 3d2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <myvar+0x3>
    digitalWrite(led, HIGH);  // turn the LED on (HIGH is the voltage level) // INOLINE 25
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	8d e0       	ldi	r24, 0x0D	; 13
 3da:	0e 94 70 00 	call	0xe0	; 0xe0 <digitalWrite>
    delay(1000);               // wait for a second // INOLINE 26
 3de:	68 ee       	ldi	r22, 0xE8	; 232
 3e0:	73 e0       	ldi	r23, 0x03	; 3
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <delay>
    digitalWrite(led, LOW);   // turn the LED off by making the voltage LOW // INOLINE 27
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 70 00 	call	0xe0	; 0xe0 <digitalWrite>
    delay(1000);               // wait for a second // INOLINE 28
 3f2:	68 ee       	ldi	r22, 0xE8	; 232
 3f4:	73 e0       	ldi	r23, 0x03	; 3
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <delay>
    kk += myvar; // INOLINE 29
 3fe:	a5 01       	movw	r20, r10
 400:	94 01       	movw	r18, r8
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 32 02 	call	0x464	; 0x464 <__addsf3>
 40a:	6b 01       	movw	r12, r22
 40c:	7c 01       	movw	r14, r24
    if( kk > 3 )  // INOLINE 30
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e4       	ldi	r20, 0x40	; 64
 414:	50 e4       	ldi	r21, 0x40	; 64
 416:	0e 94 1e 03 	call	0x63c	; 0x63c <__gesf2>
 41a:	18 16       	cp	r1, r24
 41c:	74 f4       	brge	.+28     	; 0x43a <main+0x170>
    { // INOLINE 31
        delay( kk ); // INOLINE 32
 41e:	c7 01       	movw	r24, r14
 420:	b6 01       	movw	r22, r12
 422:	0e 94 9e 02 	call	0x53c	; 0x53c <__fixunssfsi>
 426:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <delay>
        kk = myvar-kk; // INOLINE 33
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	c5 01       	movw	r24, r10
 430:	b4 01       	movw	r22, r8
 432:	0e 94 31 02 	call	0x462	; 0x462 <__subsf3>
 436:	6b 01       	movw	r12, r22
 438:	7c 01       	movw	r14, r24
    } // INOLINE 34
    myvar = kk*2; // INOLINE 35
 43a:	a7 01       	movw	r20, r14
 43c:	96 01       	movw	r18, r12
 43e:	c7 01       	movw	r24, r14
 440:	b6 01       	movw	r22, r12
 442:	0e 94 32 02 	call	0x464	; 0x464 <__addsf3>
 446:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <myvar>
 44a:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <myvar+0x1>
 44e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <myvar+0x2>
 452:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <myvar+0x3>
 456:	20 97       	sbiw	r28, 0x00	; 0
 458:	09 f4       	brne	.+2      	; 0x45c <main+0x192>
 45a:	a3 cf       	rjmp	.-186    	; 0x3a2 <main+0xd8>
 45c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 460:	a0 cf       	rjmp	.-192    	; 0x3a2 <main+0xd8>

00000462 <__subsf3>:
 462:	50 58       	subi	r21, 0x80	; 128

00000464 <__addsf3>:
 464:	bb 27       	eor	r27, r27
 466:	aa 27       	eor	r26, r26
 468:	0e 94 49 02 	call	0x492	; 0x492 <__addsf3x>
 46c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 470:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 474:	38 f0       	brcs	.+14     	; 0x484 <__addsf3+0x20>
 476:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 47a:	20 f0       	brcs	.+8      	; 0x484 <__addsf3+0x20>
 47c:	39 f4       	brne	.+14     	; 0x48c <__addsf3+0x28>
 47e:	9f 3f       	cpi	r25, 0xFF	; 255
 480:	19 f4       	brne	.+6      	; 0x488 <__addsf3+0x24>
 482:	26 f4       	brtc	.+8      	; 0x48c <__addsf3+0x28>
 484:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 488:	0e f4       	brtc	.+2      	; 0x48c <__addsf3+0x28>
 48a:	e0 95       	com	r30
 48c:	e7 fb       	bst	r30, 7
 48e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>

00000492 <__addsf3x>:
 492:	e9 2f       	mov	r30, r25
 494:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 498:	58 f3       	brcs	.-42     	; 0x470 <__addsf3+0xc>
 49a:	ba 17       	cp	r27, r26
 49c:	62 07       	cpc	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	95 07       	cpc	r25, r21
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__addsf3x+0x1c>
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <__addsf3x+0x34>
 4a8:	a6 f5       	brtc	.+104    	; 0x512 <__addsf3x+0x80>
 4aa:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 4ae:	0e f4       	brtc	.+2      	; 0x4b2 <__addsf3x+0x20>
 4b0:	e0 95       	com	r30
 4b2:	0b 2e       	mov	r0, r27
 4b4:	ba 2f       	mov	r27, r26
 4b6:	a0 2d       	mov	r26, r0
 4b8:	0b 01       	movw	r0, r22
 4ba:	b9 01       	movw	r22, r18
 4bc:	90 01       	movw	r18, r0
 4be:	0c 01       	movw	r0, r24
 4c0:	ca 01       	movw	r24, r20
 4c2:	a0 01       	movw	r20, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	ff 27       	eor	r31, r31
 4c8:	59 1b       	sub	r21, r25
 4ca:	99 f0       	breq	.+38     	; 0x4f2 <__addsf3x+0x60>
 4cc:	59 3f       	cpi	r21, 0xF9	; 249
 4ce:	50 f4       	brcc	.+20     	; 0x4e4 <__addsf3x+0x52>
 4d0:	50 3e       	cpi	r21, 0xE0	; 224
 4d2:	68 f1       	brcs	.+90     	; 0x52e <__addsf3x+0x9c>
 4d4:	1a 16       	cp	r1, r26
 4d6:	f0 40       	sbci	r31, 0x00	; 0
 4d8:	a2 2f       	mov	r26, r18
 4da:	23 2f       	mov	r18, r19
 4dc:	34 2f       	mov	r19, r20
 4de:	44 27       	eor	r20, r20
 4e0:	58 5f       	subi	r21, 0xF8	; 248
 4e2:	f3 cf       	rjmp	.-26     	; 0x4ca <__addsf3x+0x38>
 4e4:	46 95       	lsr	r20
 4e6:	37 95       	ror	r19
 4e8:	27 95       	ror	r18
 4ea:	a7 95       	ror	r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	53 95       	inc	r21
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <__addsf3x+0x52>
 4f2:	7e f4       	brtc	.+30     	; 0x512 <__addsf3x+0x80>
 4f4:	1f 16       	cp	r1, r31
 4f6:	ba 0b       	sbc	r27, r26
 4f8:	62 0b       	sbc	r22, r18
 4fa:	73 0b       	sbc	r23, r19
 4fc:	84 0b       	sbc	r24, r20
 4fe:	ba f0       	brmi	.+46     	; 0x52e <__addsf3x+0x9c>
 500:	91 50       	subi	r25, 0x01	; 1
 502:	a1 f0       	breq	.+40     	; 0x52c <__addsf3x+0x9a>
 504:	ff 0f       	add	r31, r31
 506:	bb 1f       	adc	r27, r27
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	c2 f7       	brpl	.-16     	; 0x500 <__addsf3x+0x6e>
 510:	0e c0       	rjmp	.+28     	; 0x52e <__addsf3x+0x9c>
 512:	ba 0f       	add	r27, r26
 514:	62 1f       	adc	r22, r18
 516:	73 1f       	adc	r23, r19
 518:	84 1f       	adc	r24, r20
 51a:	48 f4       	brcc	.+18     	; 0x52e <__addsf3x+0x9c>
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f7 95       	ror	r31
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	08 f0       	brcs	.+2      	; 0x52c <__addsf3x+0x9a>
 52a:	b0 cf       	rjmp	.-160    	; 0x48c <__addsf3+0x28>
 52c:	93 95       	inc	r25
 52e:	88 0f       	add	r24, r24
 530:	08 f0       	brcs	.+2      	; 0x534 <__addsf3x+0xa2>
 532:	99 27       	eor	r25, r25
 534:	ee 0f       	add	r30, r30
 536:	97 95       	ror	r25
 538:	87 95       	ror	r24
 53a:	08 95       	ret

0000053c <__fixunssfsi>:
 53c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_splitA>
 540:	88 f0       	brcs	.+34     	; 0x564 <__fixunssfsi+0x28>
 542:	9f 57       	subi	r25, 0x7F	; 127
 544:	98 f0       	brcs	.+38     	; 0x56c <__fixunssfsi+0x30>
 546:	b9 2f       	mov	r27, r25
 548:	99 27       	eor	r25, r25
 54a:	b7 51       	subi	r27, 0x17	; 23
 54c:	b0 f0       	brcs	.+44     	; 0x57a <__fixunssfsi+0x3e>
 54e:	e1 f0       	breq	.+56     	; 0x588 <__fixunssfsi+0x4c>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a f0       	brmi	.+6      	; 0x560 <__fixunssfsi+0x24>
 55a:	ba 95       	dec	r27
 55c:	c9 f7       	brne	.-14     	; 0x550 <__fixunssfsi+0x14>
 55e:	14 c0       	rjmp	.+40     	; 0x588 <__fixunssfsi+0x4c>
 560:	b1 30       	cpi	r27, 0x01	; 1
 562:	91 f0       	breq	.+36     	; 0x588 <__fixunssfsi+0x4c>
 564:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 568:	b1 e0       	ldi	r27, 0x01	; 1
 56a:	08 95       	ret
 56c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 570:	67 2f       	mov	r22, r23
 572:	78 2f       	mov	r23, r24
 574:	88 27       	eor	r24, r24
 576:	b8 5f       	subi	r27, 0xF8	; 248
 578:	39 f0       	breq	.+14     	; 0x588 <__fixunssfsi+0x4c>
 57a:	b9 3f       	cpi	r27, 0xF9	; 249
 57c:	cc f3       	brlt	.-14     	; 0x570 <__fixunssfsi+0x34>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b3 95       	inc	r27
 586:	d9 f7       	brne	.-10     	; 0x57e <__fixunssfsi+0x42>
 588:	3e f4       	brtc	.+14     	; 0x598 <__fixunssfsi+0x5c>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__gesf2>:
 63c:	0e 94 23 03 	call	0x646	; 0x646 <__fp_cmp>
 640:	08 f4       	brcc	.+2      	; 0x644 <__gesf2+0x8>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_cmp>:
 646:	99 0f       	add	r25, r25
 648:	00 08       	sbc	r0, r0
 64a:	55 0f       	add	r21, r21
 64c:	aa 0b       	sbc	r26, r26
 64e:	e0 e8       	ldi	r30, 0x80	; 128
 650:	fe ef       	ldi	r31, 0xFE	; 254
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	e8 07       	cpc	r30, r24
 658:	f9 07       	cpc	r31, r25
 65a:	c0 f0       	brcs	.+48     	; 0x68c <__fp_cmp+0x46>
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	e4 07       	cpc	r30, r20
 662:	f5 07       	cpc	r31, r21
 664:	98 f0       	brcs	.+38     	; 0x68c <__fp_cmp+0x46>
 666:	62 1b       	sub	r22, r18
 668:	73 0b       	sbc	r23, r19
 66a:	84 0b       	sbc	r24, r20
 66c:	95 0b       	sbc	r25, r21
 66e:	39 f4       	brne	.+14     	; 0x67e <__fp_cmp+0x38>
 670:	0a 26       	eor	r0, r26
 672:	61 f0       	breq	.+24     	; 0x68c <__fp_cmp+0x46>
 674:	23 2b       	or	r18, r19
 676:	24 2b       	or	r18, r20
 678:	25 2b       	or	r18, r21
 67a:	21 f4       	brne	.+8      	; 0x684 <__fp_cmp+0x3e>
 67c:	08 95       	ret
 67e:	0a 26       	eor	r0, r26
 680:	09 f4       	brne	.+2      	; 0x684 <__fp_cmp+0x3e>
 682:	a1 40       	sbci	r26, 0x01	; 1
 684:	a6 95       	lsr	r26
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	81 1d       	adc	r24, r1
 68a:	81 1d       	adc	r24, r1
 68c:	08 95       	ret

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
